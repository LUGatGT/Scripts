#imports
import sys, os, fnmatch, shutil

# Needed for colored output.

class color:
	escape = '\033['
	endEscape = 'm'
	black = '\033[30m'
	blue = '\033[34m'
	green = '\033[32m'
	cyan = '\033[36m'
	red = '\033[31m'
	purple = '\033[35m'
	white = '\033[37m'
	endc = '\033[0m'

AddOption(
	'--no-color',
	dest='nocolor',
	action='store_true',
	default=False,
	help='Disable colored build.'
)

# Environment initialization
env = 0;
if GetOption('nocolor'):
	env = Environment(
			CCCOMSTR='[CC] $SOURCES',
			SHCXXCOMSTR='[CXX] $SOURCES',
			CXXCOMSTR='[CXX] $SOURCES',
			SHCCCOMSTR='[CC] $SOURCES',
			SHLINKCOMSTR='[LD] $TARGET',
			LINKCOMSTR='[LD] $TARGET'
	)
else:
	env = Environment(
			CCCOMSTR= color.cyan + '[' + color.green + 'CC' + color.cyan +']' + color.endc + ' ' + '$SOURCES',
			SHCXXCOMSTR= color.cyan + '[' + color.green + 'CXX' + color.cyan +']' + color.endc + ' ' + '$SOURCES',
			CXXCOMSTR= color.cyan + '[' + color.green + 'CXX' + color.cyan +']' + color.endc + ' ' + '$SOURCES',
			SHCCCOMSTR= color.cyan + '[' + color.green + 'CC' + color.cyan +']' + color.endc + ' ' + '$SOURCES',
			SHLINKCOMSTR= color.cyan + '[' + color.cyan + 'LD' + color.cyan +']' + color.endc + ' ' + '$TARGET',
			LINKCOMSTR= color.cyan + '[' + color.cyan + 'LD' + color.cyan +']' + color.endc + ' ' + '$TARGET',
	)

HeaderDirectory = "include"
SourceDirectory = "src"
SourceExtensions = ["c", "cpp"]
DefaultVariant = "generic"
BuildPrefix = os.path.join("build", ".objects")

# Compile flags.
Flags = '-std=c99 -pipe'

# Options
AddOption(
	'--lto',
	dest='lto',
	action='store_true',
	default=False,
	help='Link time optimization.'
)

AddOption(
	'--debugging',
	dest='debug',
	action='store_true',
	default=False,
	help='Compile a debug release'
)

AddOption('--strict',
	dest='strict',
	action='store_true',
	default=False,
	help='Stop compiling whenever the compiler issues a warning.'
)

AddOption(
	'--fast',
	dest='fast',
	action='store_true',
	default=False,
	help='Compile a fast executable'
)

AddOption(
	'--small',
	dest='small',
	action='store_true',
	default=False,
	help='Compile a small executable'
)

AddOption(
	'--tool-prefix',
	dest='tool-prefix',
	type='string',
	nargs=1,
	action='store',
	metavar='TOOL',
	help='tool prefix'
)

AddOption(
	'--mingw32',
	dest='mingw32',
	action='store_true',
	default=False,
	help='Cross compile for windows'
)

Variant = DefaultVariant

if(GetOption('mingw32')):
	env.Append(CCFLAGS='-mwindows')
	Libraries = ['mingw32']
	Variant = 'windows'
	Executable = 'out.exe'
else:
	Libraries = []
	Executable = 'out'
	Variant = 'linux'

BuildPrefix = os.path.join(BuildPrefix, Variant)

#source directories
env.VariantDir(BuildPrefix, SourceDirectory, duplicate=0)
Sources = []
for Extension in SourceExtensions:
	for Root, Directories, Files in os.walk(SourceDirectory):
		for Files in fnmatch.filter(Files, '*.' + Extension):
			Sources.append((os.path.join(Root, Files)).replace(SourceDirectory, BuildPrefix, 1))

Executable = os.path.join('build',  os.path.join(Variant, Executable))

# Include directories
Headers = [HeaderDirectory]

#env setup
env.Append(CCFLAGS=Flags)
env.Append(CPPPATH=Headers)
if(GetOption('tool-prefix')):
	env['CC']=GetOption('tool-prefix')+'-'+env['CC']
	env['CXX']=GetOption('tool-prefix')+'-'+env['CXX']

#option reading
if(GetOption('debug')):
	env.Append(CCFLAGS='-ggdb -Wall -Wextra')
if(GetOption('strict')):
	env.Append(CCFLAGS='-Werror')
if(GetOption('small')):
	env.Append(CCFLAGS='-Os')
if(GetOption('fast')):
	env.Append(CCFLAGS='-O3')
if(GetOption('lto')):
	env.Append(CCFLAGS='-flto')
	env.Append(LINKFLAGS='-flto')
if(not GetOption('debug')):
	env.Append(CCFLAGS='-DNDEBUG')
Install = env.Program(Executable, Sources, LIBS=Libraries)



#install
env.Install('/usr/local/bin', Install)

#aliases
env.Alias('install',['/usr/local/bin'])
